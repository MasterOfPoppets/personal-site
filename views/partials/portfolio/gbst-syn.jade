h1 GBST Syn~ Web Framework
p
  | GBST is a provider of software and services to the global financial
  | services industry. Their current offering is Syn~, a highly configurable 
  | and dynamic platform for Straight-Through Processing of high volumes of
  | financial transactions.
p
  | I joined GBST as a software developer as part of their Graduate scheme.
  | In 2008 my technical skills were recognised and I was promoted to design
  | and develop a new web framework for the product. My continued development
  | in this area led to a promotion to Web Architect in 2011 and I was
  | responsible for a small team of developers.
figure
  img(src='/images/portfolio/syn_trade_details.png' alt='Syn Trade Details screen')
  figcaption A trade details screen built using the Syn~ Web Framework
p
  | We decided that in order to build the framework, we would use 
  | <a href='http://www.gwtproject.org/'>Google Web Toolkit</a>
  | as it enabled developers to program in Java, a language that they were more
  | familiar with than Javascript.
p
  | My job in developing this framework was to provide a set of
  | <span class='italic'>Widgets</span> and <span class='italic'>Layouts</span>
  | so that screen developers could use them to construct not only a 
  | fully-functioning screen, but one that maintained a consistency of design
  | across the entire system.
p
  | Within the system, Widgets would range from something as simple as a label
  | which displayed a single read-only piece to data, to tables representing 
  | complex collections of objects. The philosophy behind the widgets was that
  | a screen builder would, at the simplest level, not care about what widget
  | they needed to use to represent a piece of data - they would just bind a 
  | generic widget to a data field and the framework would create the correct
  | widget on the screen based on factors such as the type, whether the object
  | is being edited and whether the user has the ability to edit that specific 
  | piece of data.
figure
  img(src='/images/portfolio/syn_trade_capture.png' alt='Syn Trade Capture screen')
  figcaption 
    | A trade capture screen built using the Syn~ Web Framework. In terms of
    | building this screen, it would be very similar to the previous screen.
    | The underlying framework is responsible for creating the appropriate
    | input fields and validation errors.
p  
  | The previous version of the GBST web offering offered almost too much
  | freedom to developers working on screens, and this resulted in an
  | application which often looked vastly different from one screen to the 
  | next. Layouts where my solution to this problem. Any given screen could
  | be constructed using one of a small number of layouts, usually chosen based
  | on the general purpose of the screen (editing simple data / viewing tabular
  | data / etc).
p  
  | A layout represents a series of slots that widgets or groups of widgets 
  | could be plugged into. This helped to ensure a much more cohesive design
  | across the whole of the application, without individual screen developers
  | having to cross-reference many screens to check that what they were making
  | 'fit'.
figure
  img(src='/images/portfolio/syn_workflow.png' alt='Syn SSI Workflow screen')
  figcaption 
    | An SSI (Standard Settlement Instruction) workflow screen - this data is 
    | retrieved via a service call to the back-end.
p
  | Of course, in order to provide such a rich and functional application, the
  | back-end server needs to be great. GWT uses AJAX via a wrapper called RPC.
  | By using GWT RPC I was able to create services that allowed two-way
  | communication between the user and the underlying Syn~ processing system.
p
  | With the system being as large as it is, with many different screens 
  | available within the application, it was imperative that we had a good
  | testing framework in place. Once screens had been made, they were tested
  | individually using , however, the framework itself required a robust test
  | suite in place before anyone was even able to make screens. For this we
  | used Selenium WebDriver and JUnit 4.0 to create a comprehensive test suite
  | to cover every facet of the framework.
p
  | You can read more about GBST and how they use GWT in 
  | <a href='http://google-web-toolkit.googlecode.com/files/CaseStudy-GBST-Uses-GWT.pdf'>this case study</a>.